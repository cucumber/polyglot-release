#!/bin/bash

FAILURE=
SRC=$(realpath .)

function setup_git_repos() {
  fixture=$1
  mkdir origin
  pushd origin > /dev/null
  git init --quiet --bare
  git symbolic-ref HEAD refs/heads/main
  popd > /dev/null
  git clone origin local --quiet 2> /dev/null
  pushd local > /dev/null
  git checkout --quiet -b main
  git config user.email "tests@example.com"
  git config user.name "Cucumber tests"
  cp -R $fixture/. . 
  git add .
  git commit -m "Initial commit" --quiet
  git tag v0.0.1
  git push --set-upstream origin main --quiet
  git push --tags --quiet
  popd > /dev/null
}

function get_fixture() {
  test=$1
  header="$(head -n 1 $test)"
  fixture_pattern="# fixture: (.+)"
  if [[ $header =~ $fixture_pattern ]]
  then
    fixture="${BASH_REMATCH[1]}"
  else
    fixture=polyglot
  fi
  echo $fixture
}

function run_test() {
  test=$1
  test_failed=
  echo -n "${test##*/} "
  workdir=$(mktemp -d)
  fixture=$(realpath ./tests/fixtures/$(get_fixture $test))
  pushd $workdir > /dev/null
  setup_git_repos $fixture
  popd > /dev/null
  pushd $workdir/local > /dev/null
  PATH=$PATH:$SRC \
    RELEASE_DATE=2000-01-01 \
    /bin/sh $test \
    > $test.actual.output \
    2> $test.actual.stderr
  echo $? > $test.actual.exit-status
  git diff --unified=0 \
    | sed -e '/^index/d' \
    > $test.actual.git-diff
  git log --format="%s %d" \
    > $test.actual.git-log
  popd > /dev/null
  pushd $workdir/origin > /dev/null
  git log --format="%s %d" \
    > $test.actual.origin-git-log
  popd > /dev/null
  for type in output git-diff git-log exit-status stderr origin-git-log; do
    if [ -f "$test.expected.$type" ]; then
      failure=$(diff $test.expected.$type $test.actual.$type)
      if [[ $? != 0 ]]; then 
        echo
        echo Actual output different to expected!
        echo "$test.expected.$type"
        echo "$test.actual.$type"
        echo
        echo "$failure"
        test_failed="true";
      fi
    fi
  done
  if [ -n "$test_failed" ]; then
    FAILURE="true"
    echo "Examine files in $workdir"
    echo ðŸ”´
  else
    echo âœ…
  fi
}

if [ $1 ]; then
  # Run a single test
  run_test $(realpath $1)
else
  # Run all tests
  tests=$(realpath tests)
  for test in $tests/*.sh; do
    run_test $test
  done
fi
test -z $FAILURE
