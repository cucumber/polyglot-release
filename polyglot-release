#!/bin/bash
set -e

# quiet output from pushd / popd
function pushd() {
  command pushd "$@" >/dev/null
}
function popd() {
  command popd >/dev/null
}
# Usage: 'run pre_release|release|post_release <language>'
function run() {
  if [[ -d $2 ]]; then
    pushd "$2"
    eval "$1_$2"
    popd
  elif eval "is_monoglot_$2"; then
    eval "$1_$2"
  fi
}

function is_monoglot_go() {
  [[ -f go.mod ]]
}
function pre_release_go() {
  check_for_tools "go" "jq"
}
function release_go() {
  MODULE_WITH_NEW_VERSION=$(
    go mod edit -json |\
    jq -r '.Module.Path' |\
    sed --regexp-extended "s/(.*)v[0-9]+.[0-9]+.[0-9]+$/\1v$NEW_VERSION/"
  )
  go mod edit -module "$MODULE_WITH_NEW_VERSION"
}
function post_release_go() {
  # noop
  :
}

function is_monoglot_javascript() {
  [[ -f package.json ]]
}
function pre_release_javascript() {
  check_for_tools "npm"
}
function release_javascript() {
  npm version --no-git-tag-version "$NEW_VERSION" >/dev/null
}
function post_release_javascript() {
  # noop
  :
}

function is_monoglot_java() {
  [[ -f pom.xml ]]
}
function pre_release_java() {
  check_for_tools "mvn"
}
function release_java() {
  mvn --quiet versions:set -DnewVersion="$NEW_VERSION" 2>/dev/null
  mvn --quiet versions:set-scm-tag -DnewTag="v$NEW_VERSION" 2>/dev/null
}
function post_release_java() {
  new_version_template="\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT"
  mvn --quiet \
    build-helper:parse-version \
    versions:set -DnewVersion="$new_version_template" \
    versions:set-scm-tag -DnewTag="HEAD" \
    2>/dev/null
}

function is_monoglot_ruby() {
  [[ -f Rakefile ]]
}
function pre_release_ruby() {
  if [[ ! -f VERSION ]];
  then
    echo "This looks like a Ruby project, but there is no VERSION file"
    exit 1
  fi
}
function release_ruby() {
  echo "$NEW_VERSION" >VERSION
}
function post_release_ruby() {
  # noop
  :
}

function validate_new_version_argument() {
  if [[ ! "$NEW_VERSION" =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]; then
    echo "Invalid MAJOR.MINOR.PATCH argument: $NEW_VERSION"
    show_usage
    exit 1
  fi

  if [ -n "$(git tag --list "v$NEW_VERSION")" ]; then
    echo "Version $NEW_VERSION has already been released."
    exit 1
  fi
}

function check_for_tools() {
  for tool in "$@"; do
    if ! command -v $tool >/dev/null; then
      echo "$tool is not installed!"
      missing_tool="true"
    fi
  done
  if [ -n "$missing_tool" ]; then
    echo
    echo "Please install the missing required tool(s)."
    exit 1
  fi
}

function check_changelog_exists() {
  if [[ ! -f CHANGELOG.md ]]; then
    echo "Please create a CHANGELOG.md"
    exit 1
  fi
}

function check_in_git_root_directory() {
  git_root=$(git rev-parse --show-toplevel)
  pwd=$(realpath $(pwd))
  if [[ "$git_root" != "$pwd" ]]; then
    relative_path=$(realpath --relative-to="$(pwd)" "$git_root")
    echo "You're not in the root directory of your git repo!"
    echo
    echo "Try this:"
    echo "    cd $relative_path"
    exit 1
  fi
}

function check_git_tags_fetched() {
  if [[ -z "$(git tag --list "v$(changelog latest)")" ]]; then
    echo "No git tag found for v$(changelog latest) (found in CHANGELOG.md)!"
    echo
    echo "Do you need to run this?"
    echo "    git fetch --tags"
    exit 1
  fi
}

function check_git_index_clean() {
  if ! git diff-index --quiet HEAD; then
    echo "Git has uncommitted changes."
    exit 1
  fi
}

function show_usage() {
  echo "Usage: polyglot-release [OPTIONS] MAJOR.MINOR.PATCH"
  echo "OPTIONS:"
  echo "  --help                 shows this help"
  echo "  --no-git-push          do not push to git"
  echo "  --no-git-commit        do not commit git"
  echo "  --only-release         do not update versions after release"
}

# Initialize global variables
NEW_VERSION=
NO_GIT_PUSH=
ONLY_RELEASE=
POSITIONAL_ARGS=()
RELEASE_DATE=${RELEASE_DATE:-$(date +%F)}
SUPPORTED_LANGUAGES="go java javascript ruby"

while [[ $# -gt 0 ]]; do
  case $1 in
  --no-git-push)
    NO_GIT_PUSH="true"
    shift # past argument
    ;;
  --no-git-commit)
    NO_GIT_COMMIT="true"
    NO_GIT_PUSH="true"
    shift # past argument
    ;;
  --only-release)
    ONLY_RELEASE="true"
    shift # past argument
    ;;
  -h | --help)
    echo "Makes a release to GitHub"
    show_usage
    exit 0
    ;;
  --* | -*)
    echo "Unknown option $1"
    show_usage
    exit 1
    ;;
  *)
    POSITIONAL_ARGS+=("$1") # save positional arg
    shift                   # past argument
    ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

check_for_tools "git" "changelog"
check_in_git_root_directory
check_changelog_exists
check_git_tags_fetched
check_git_index_clean

if [[ $# -ne 1 ]]; then
  echo "Please specify a version to release. Use --help to show usage instructions."
  echo
  echo "To help you choose the next version, here are the unreleased changes:"
  echo
  echo "$(changelog show unreleased)"
  echo
  exit 1
fi
NEW_VERSION=$1
validate_new_version_argument

###
## pre release
###
for language in $SUPPORTED_LANGUAGES; do
  run pre_release "$language"
done

###
## release
###
for language in $SUPPORTED_LANGUAGES; do
  run release "$language"
done

changelog release "$NEW_VERSION" \
  --release-date "$RELEASE_DATE" \
  --tag-format "v%s" \
  --output CHANGELOG.md

if [[ -z $NO_GIT_COMMIT ]]; then
  git commit --gpg-sign --quiet --all --message="Prepare release v$NEW_VERSION"
  git tag --sign --message "v$NEW_VERSION" "v$NEW_VERSION"
fi

###
## post release
###
if [[ -n $ONLY_RELEASE ]]; then
  exit 0
fi

for language in $SUPPORTED_LANGUAGES; do
  run post_release "$language"
done

if [[ -z $NO_GIT_COMMIT ]]; then
  git commit --gpg-sign --quiet --all --message="Prepare for the next development iteration"
fi

###
# push to github
##
if [[ -z $NO_GIT_PUSH ]]; then
  git push --quiet origin
  git push --quiet origin "$(git rev-list --max-count=1 "v$NEW_VERSION"):refs/heads/release/v$NEW_VERSION"
fi
