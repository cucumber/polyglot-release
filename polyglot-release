#!/bin/bash
set -e

# quiet output from pushd / popd / find
function pushd() {
  command pushd "$@" >/dev/null
}
function popd() {
  command popd >/dev/null
}
function find() {
  command find "$@" 2>/dev/null
}
function realpath() {
  # See the caveats on https://formulae.brew.sh/formula/coreutils
  if command -v "grealpath" >/dev/null; then
    command grealpath "$@"
  else
    command realpath "$@"
  fi
}

# Usage: 'run pre_release|release|post_release <language>'
function run() {
  if [[ -d $2 ]]; then
    pushd "$2"
    eval "$1_$2"
    popd
  elif eval "is_monoglot_$2"; then
    IS_CURRENT_LANGUAGE_POLYGLOT=
    eval "$1_$2"
    IS_CURRENT_LANGUAGE_POLYGLOT=true
  fi
}
# Usage 'decorate "prefix" "suffix" "${TAGS{@}}"'
function decorate() {
    local prefix=$1
    local suffix=$2
    local tags=()

    for tag in "${@:3}" ; do
      tags+=("${prefix}${tag}${suffix}")
    done
    echo "${tags[@]}"
}

SUPPORTED_LANGUAGES=()

SUPPORTED_LANGUAGES+=("android")
function is_monoglot_android() {
  [[ -f gradle.properties ]]
}
function pre_release_android() {
  check_for_tools "sed"
}
function release_android() {
  update_gradle_properties_version "$NEW_VERSION"
}
function post_release_android() {
  update_gradle_properties_version "$(next_development_version)-SNAPSHOT"
}
function update_gradle_properties_version() {
  version=$1
  sed -i".tmp" \
    -e "s/\(version *= *\)[0-9]*\.[0-9]*\.[0-9]*/\1$version/" \
    "gradle.properties"
  rm -f "gradle.properties.tmp"
}

SUPPORTED_LANGUAGES+=("c")
function is_monoglot_c() {
  [[ -f VERSION ]]
}
function pre_release_c() {
  if [[ ! -f VERSION ]]; then
    echo "This looks like a C project, but there is no VERSION file"
    exit 1
  fi
}
function release_c() {
  echo "$NEW_VERSION" >VERSION
}
function post_release_c() {
  # noop
  :
}

SUPPORTED_LANGUAGES+=("cpp")
function is_monoglot_cpp() {
  [[ -f VERSION ]]
}
function pre_release_cpp() {
  if [[ ! -f VERSION ]]; then
    echo "This looks like a C++ project, but there is no VERSION file"
    exit 1
  fi
}
function release_cpp() {
  echo "$NEW_VERSION" >VERSION
}
function post_release_cpp() {
  # noop
  :
}

SUPPORTED_LANGUAGES+=("dotnet")
function is_monoglot_dotnet() {
  [[ $(find ./*.sln -type f | wc -l) -gt 0 ]]
}
function pre_release_dotnet() {
  check_for_tools "xmlstarlet"
  if [[ ! -f "$(cs_project_file)" ]]; then
    echo "This looks like a .Net project, but there is no $(cs_project_file) file"
    exit 1
  fi
}
function release_dotnet() {
  xmlstarlet ed --pf --omit-decl --inplace --update /Project/PropertyGroup/VersionNumber --value "$NEW_VERSION" "$(cs_project_file)"
}
function post_release_dotnet() {
  # noop
  :
}
function cs_project_file() {
  solution_file=$(realpath "$(find ./*.sln -type f)" --relative-to="$(pwd)")
  project_name=${solution_file%.sln}
  echo "$project_name/$project_name.csproj"
}

SUPPORTED_LANGUAGES+=("elixir")
function is_monoglot_elixir() {
  [[ -f mix.exs ]]
}
function pre_release_elixir() {
  check_for_tools "sed"
}
function release_elixir() {
  sed -i".tmp" "s/version: \".*\"/version: \"$NEW_VERSION\"/" "mix.exs"
  rm -rf mix.exs.tmp
}
function post_release_elixir() {
  # noop
  :
}

SUPPORTED_LANGUAGES+=("github-action")
function is_monoglot_github-action() {
  [[ -f action.yaml ]]
}
function pre_release_github-action() {
  # noop
  :
}
function release_github-action() {
  # noop, publishing github only uses git tags
  :
}
function post_release_github-action() {
  # noop
  :
}

SUPPORTED_LANGUAGES+=("go")
function is_monoglot_go() {
  [[ -f go.mod ]]
}
function pre_release_go() {
  check_for_tools "go" "jq" "sed" "find"
  if $IS_CURRENT_LANGUAGE_POLYGLOT; then
    # Use an additional tag. See: https://go.dev/ref/mod#vcs-version
    TAGS+=("go/v$NEW_VERSION");
  fi
}
function release_go() {
  local module_with_old_version
  module_with_old_version="$(go mod edit -json | jq -r '.Module.Path' )"
  local new_major_version
  new_major_version="$(echo "$NEW_VERSION" | sed -E 's/^([0-9]+)\.[0-9]+\.[0-9]+$/\1/')"
  # The sed below also captures 3-digit versions
  local module_with_new_version
  module_with_new_version="$(echo "$module_with_old_version" | sed -E "s/(.*)v[0-9]+(\.[0-9]+\.[0-9]+)?$/\1v$new_major_version/")"

  go mod edit -module "$module_with_new_version"
  find . -name '*.go' -exec sed -i".tmp" "s#$module_with_old_version#$module_with_new_version#g" {} \;
  find . -name '*.go.tmp' -exec rm {} \;
}
function post_release_go() {
  # noop
  :
}

SUPPORTED_LANGUAGES+=("javascript")
function is_monoglot_javascript() {
  [[ -f package.json ]]
}
function pre_release_javascript() {
  check_for_tools "npm"
}
function release_javascript() {
  npm version --no-git-tag-version "$NEW_VERSION" >/dev/null
}
function post_release_javascript() {
  # noop
  :
}

SUPPORTED_LANGUAGES+=("java")
function is_monoglot_java() {
  [[ -f pom.xml ]]
}
function pre_release_java() {
  check_for_tools "mvn"
}
function release_java() {
  mvn --quiet versions:set -DnewVersion="$NEW_VERSION" 2>/dev/null
  mvn --quiet versions:set-scm-tag -DnewTag="v$NEW_VERSION" 2>/dev/null
}
function post_release_java() {
  new_version_template="\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT"
  mvn --quiet \
    build-helper:parse-version \
    versions:set -DnewVersion="$new_version_template" \
    versions:set-scm-tag -DnewTag="HEAD" \
    2>/dev/null
}

SUPPORTED_LANGUAGES+=("perl")
function is_monoglot_perl() {
  [[ -f cpanfile ]]
}
function pre_release_perl() {
  if [[ ! -f VERSION ]]; then
    echo "This looks like a Perl project, but there is no VERSION file"
    exit 1
  fi
}
function release_perl() {
  echo "$NEW_VERSION" >VERSION
}
function post_release_perl() {
  # noop
  :
}

# Note: Do not repeat this pattern for project specific needs
# Instead implement https://github.com/cucumber/polyglot-release/issues/67
SUPPORTED_LANGUAGES+=("polyglot-release")
function is_monoglot_polyglot-release() {
  [[ -f polyglot-release ]]
}
function pre_release_polyglot-release() {
  check_for_tools "sed"
  if [[ ! -f README.md ]]; then
    echo "This looks like the polyglot-release project, but there is no README.md file"
    exit 1
  fi
}
function release_polyglot-release() {
  for file in polyglot-release README.md; do
    sed -i".tmp" "s/^POLYGLOT_RELEASE_VERSION=.*$/POLYGLOT_RELEASE_VERSION=$NEW_VERSION/" "$file"
    rm -f "$file.tmp"
  done
}
function post_release_polyglot-release() {
  sed -i".tmp" "s/^POLYGLOT_RELEASE_VERSION=.*$/POLYGLOT_RELEASE_VERSION=/" polyglot-release
  rm -f "polyglot-release.tmp"
}

SUPPORTED_LANGUAGES+=("php")
function is_monoglot_php() {
  [[ -f composer.json ]]
}
function pre_release_php() {
  # noop
  :
}
function release_php() {
  # noop, composer relies on git tags
  :
}
function post_release_php() {
  # noop
  :
}

SUPPORTED_LANGUAGES+=("python")
function is_monoglot_python() {
  [[ -f pyproject.toml || -f setup.py ]]
}
function pre_release_python() {
  check_for_tools "sed"
  if [[ -f uv.lock && -f pyproject.toml ]]; then
      if [[ -z $(python_project_name) ]]; then
        echo "This looks like a Python UV project, but the project name is blank."
        exit 1
      fi
  fi
}

function release_python() {
  if [[ -f pyproject.toml ]]; then
    PROJECT_FILE=pyproject.toml
  else
    PROJECT_FILE=setup.py
  fi

  sed -i".tmp" \
    -e "s/\(version *= *\"\)[0-9]*\.[0-9]*\.[0-9]*\(\"\)/\1$NEW_VERSION\2/" \
    "$PROJECT_FILE"
  rm -f "$PROJECT_FILE.tmp"
  
  if [[ -f uv.lock && -f pyproject.toml ]]; then
    set -x
    sed -i".tmp" \
      -e "/name *= *\"$(python_project_name)\"/{n;s/\(version *= *\"\)[0-9]*\.[0-9]*\.[0-9]*\(\"\)/\1$NEW_VERSION\2/}" "uv.lock"
    rm -f "uv.lock.tmp"
  fi
}
function post_release_python() {
  # noop
  :
}

function python_project_name() {
  grep -E  'name *= *"[a-z]+"' pyproject.toml  | sed 's/name *= *"//' | sed 's/"//'
}


SUPPORTED_LANGUAGES+=("ruby")
function is_monoglot_ruby() {
  [[ $(find ./*.gemspec -type f | wc -l) -gt 0 ]]
}
function pre_release_ruby() {
  if [[ ! -f VERSION ]]; then
    echo "This looks like a Ruby project, but there is no VERSION file"
    exit 1
  fi
}
function release_ruby() {
  echo "$NEW_VERSION" >VERSION
}
function post_release_ruby() {
  # noop
  :
}

function validate_new_version_argument() {
  if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Invalid MAJOR.MINOR.PATCH argument: $NEW_VERSION"
    show_usage
    exit 1
  fi
}

function next_development_version() {
    echo "$NEW_VERSION_MAJOR.$NEW_VERSION_MINOR.$((NEW_VERSION_PATCH + 1))"
}

function check_for_tools() {
  for tool in "$@"; do
    if ! command -v "$tool" >/dev/null; then
      echo "$tool is not installed!"
      missing_tool="true"
    fi
  done
  if [ -n "$missing_tool" ]; then
    echo
    echo "Please install the missing required tool(s)."
    exit 1
  fi
}

function check_for_tools_realpath_with_relative_to() {
    output=$(realpath --help)
    if [[ "$output" != *"--relative-to=DIR"* ]]; then
      echo
      echo "Please install realpath with support for --relative-to"
      echo "Hint: On OSX this requires installing coreutils"
      exit 1
    fi
}

function do_update() {
  if [ -z "$POLYGLOT_RELEASE_VERSION" ]; then
    # Polyglot release was not released.
    # Let's assume we're up to date.
    return
  fi

  latest_version=$(latest_tag_in_git)
  if [ "v$POLYGLOT_RELEASE_VERSION" == "$latest_version" ]; then
    log "Already up to date"
    return
  fi

  check_for_tools "curl"

  current_script=${BASH_SOURCE[0]}

  if [ ! -w "$current_script" ]; then
    echo "You do not appear to have write permissions to $current_script. Try using sudo."
    exit 1
  fi

  new_script=$(mktemp "$current_script".XXXXXX)
  curl --silent --output "$new_script" "$POLYGLOT_RELEASE_UPDATE_LOCATION/$latest_version/polyglot-release"
  replace_file "$current_script" "$new_script"

  log "Updated to $latest_version"
}

function replace_file() {
  current_script=$1
  new_script=$2

  if [[ $(uname -s) = "Darwin" ]]; then
    uid=$(stat -f '%u' "$current_script")
    gid=$(stat -f '%g' "$current_script")
    permissions=$(stat -f '%p' "$current_script")
    chown "$uid:$gid" "$new_script"
    chmod "${permissions:3:7}" "$new_script"
  else
    chown --reference="$current_script" -- "$new_script"
    chmod --reference="$current_script" -- "$new_script"
  fi
  sync # force filesystem to fully flush file contents to disk
  mv -- "$new_script" "$current_script"
}

function check_up_to_date() {
  if [ -z "$POLYGLOT_RELEASE_VERSION" ]; then
    # Polyglot release was not released.
    # Let's assume we're up to date.
    return
  fi

  local latest_version
  latest_version=$(latest_tag_in_git)

  if [ "v$POLYGLOT_RELEASE_VERSION" == "$latest_version" ]; then
    return
  fi

  echo "Please run polyglot-release --update"
  echo " - current version: v$POLYGLOT_RELEASE_VERSION"
  echo " - latest version: $latest_version"

  exit 1
}

function latest_tag_in_git() {
  git ls-remote --tags --sort='version:refname' "$POLYGLOT_RELEASE_GIT_REPO" |
    grep -E "refs/tags/v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$" |
    cut -d '/' -f 3 |
    tail -n1
}

function check_changelog_exists() {
  if [[ ! -f CHANGELOG.md ]]; then
    echo "Please create a CHANGELOG.md"
    exit 1
  fi
}

function check_in_git_root_directory() {
  git_root=$(git rev-parse --show-toplevel)
  pwd=$(realpath "$(pwd)")
  if [[ "$git_root" != "$pwd" ]]; then
    relative_path=$(realpath --relative-to="$(pwd)" "$git_root")
    echo "You're not in the root directory of your git repo!"
    echo
    echo "Try this:"
    echo "    cd $relative_path"
    exit 1
  fi
}

function check_gpg_keys_configured() {
  if [[ ! $(git config user.signingkey) ]]; then
    echo "You do not have a user.signingkey configured in git!"
    echo
    echo "All commits need to be signed. Please see https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key"
    exit 1
  fi
  key=$(git config user.signingkey)
  if ! gpg --list-secret-keys | grep -q "$key"; then
    echo "Your git user.signingkey ($key) was not found in your GPG keys."
    echo
    echo "To see all your GPG keys, use:"
    echo "    gpg --list-secret-keys"
    echo
    echo "All commits need to be signed. Please see https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key"
    exit 1
  fi
}

function check_git_tags_do_not_exist() {
  for tag in "${TAGS[@]}"; do
    if [[ -n $(git ls-remote --tags origin "refs/tags/$tag") ]]; then
      echo "Version $NEW_VERSION has already been released with tag $tag."
      echo
      echo "Do you need to run this?"
      echo "    git fetch --tags"
      exit 1
    fi
  done
  for tag in "${TAGS[@]}"; do
    if [[ -n $(git tag --list "$tag") ]]; then
      echo "The $tag for version $NEW_VERSION already exists on your machine but not on the remote."
      echo
      echo "Did you forget to clean up the tags from an aborted release?"
      exit 1
    fi
  done
}

function check_git_index_clean() {
  if ! git diff-index --quiet HEAD; then
    echo "Git has uncommitted changes."
    exit 1
  fi
}

function check_git_even_with_origin() {
  current_branch=$(git branch --show-current)
  remote_tracking_branch=$(git config "branch.$current_branch.merge")
  origin_head=$(
    git ls-remote origin --heads "$remote_tracking_branch" |
      head -n1 |
      tr -s '[:space:]' ' ' |
      cut -d ' ' -f 1
  )
  local_head=$(git rev-list HEAD | head -n1)
  if [ "$origin_head" != "$local_head" ]; then
    echo "This branch is not even with origin $remote_tracking_branch!"
    echo
    echo "Have a look at:"
    echo "    git status"
    exit 1
  fi
}

function show_usage() {
  echo "Usage: polyglot-release [OPTIONS] MAJOR.MINOR.PATCH"
  echo "OPTIONS:"
  echo "  --help                 shows this help"
  echo "  --update               updates this script to the latest version"
  echo "  --version              show the current version"
  echo "  --no-git-push          do not push to git"
  echo "  --no-progress-bar      do not show a progress bar"
  echo "  --quiet                don't log progress messages"
}

function log() {
  if [[ -z $QUIET ]]; then
    echo "$1"
  fi
}

function log_progress_start() {
  if [[ -z $QUIET && -z $NO_PROGRESS_BAR ]]; then
    echo "$1"
  fi
}
function log_progress_increment() {
  if [[ -z $QUIET && -z $NO_PROGRESS_BAR ]]; then
    echo -n "*"
  fi
}

function log_progress_finish() {
  if [[ -z $QUIET && -z $NO_PROGRESS_BAR ]]; then
    echo
  fi
}

function format_commit_message() {
  echo "$1

Created-by: polyglot-release v${POLYGLOT_RELEASE_VERSION:--develop}"
}

# Initialize global variables
IS_CURRENT_LANGUAGE_POLYGLOT=true
NEW_VERSION=
NO_GIT_PUSH=
NO_PROGRESS_BAR=
POLYGLOT_RELEASE_VERSION=
POLYGLOT_RELEASE_GIT_REPO=${POLYGLOT_RELEASE_GIT_REPO:-https://github.com/cucumber/polyglot-release}
POLYGLOT_RELEASE_UPDATE_LOCATION=${POLYGLOT_RELEASE_UPDATE_LOCATION:-https://raw.githubusercontent.com/cucumber/polyglot-release}
QUIET=
TAGS=()
POSITIONAL_ARGS=()
RELEASE_DATE=${RELEASE_DATE:-$(date +%F)}

while [[ $# -gt 0 ]]; do
  case $1 in
  --no-git-push)
    NO_GIT_PUSH="true"
    shift # past argument
    ;;
  --no-progress-bar)
    NO_PROGRESS_BAR="true"
    shift # past argument
    ;;
  --quiet)
    QUIET="true"
    shift # past argument
    ;;
  -h | --help)
    echo "polyglot-release: Makes a release to GitHub"
    show_usage
    exit 0
    ;;
  --update)
    do_update
    exit 0
    ;;
  --version)
    echo "v${POLYGLOT_RELEASE_VERSION:--develop}"
    exit 0
    ;;
  --* | -*)
    echo "Unknown option $1"
    show_usage
    exit 1
    ;;
  *)
    POSITIONAL_ARGS+=("$1") # save positional arg
    shift                   # past argument
    ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

check_for_tools "git" "changelog" "gpg" "realpath"
check_for_tools_realpath_with_relative_to
check_up_to_date
check_in_git_root_directory
check_changelog_exists
check_gpg_keys_configured
check_git_index_clean
check_git_even_with_origin

if [[ $# -ne 1 ]]; then
  echo "Please specify a version to release. Use --help to show usage instructions."
  echo
  echo "To help you choose the next version, here are the unreleased changes:"
  echo
  changelog show unreleased
  echo
  exit 1
fi
NEW_VERSION=$1
validate_new_version_argument
NEW_VERSION_MAJOR=$(echo "$NEW_VERSION" | cut -d '.' -f1)
NEW_VERSION_MINOR=$(echo "$NEW_VERSION" | cut -d '.' -f2)
NEW_VERSION_PATCH=$(echo "$NEW_VERSION" | cut -d '.' -f3)
NEW_VERSION_TAG="v$NEW_VERSION"
TAGS+=("$NEW_VERSION_TAG")

commit_before_release="$(git rev-parse HEAD)"

###
## pre release
###
log_progress_start "Checking prerequisites"
for language in "${SUPPORTED_LANGUAGES[@]}"; do
  run pre_release "$language"
  log_progress_increment
done
log_progress_finish

check_git_tags_do_not_exist

###
## release
###
log_progress_start "Preparing release"
for language in "${SUPPORTED_LANGUAGES[@]}"; do
  run release "$language"
  log_progress_increment
done
log_progress_finish

changelog release "$NEW_VERSION" \
  --release-date "$RELEASE_DATE" \
  --tag-format "v%s" \
  --output CHANGELOG.md

log "Package manager manifests and CHANGELOG.md updated for $NEW_VERSION"
log "Here's what changed:"
log "$(git -c color.diff=always diff)"

git commit --gpg-sign --quiet --all --message="$(format_commit_message "Prepare release $NEW_VERSION_TAG")"
for tag in "${TAGS[@]}"; do
  git tag --sign --message "$(format_commit_message "$NEW_VERSION_TAG")" "$tag"
done
log "Files committed to to git and tagged $(decorate "'" "'" "${TAGS[@]}")"

###
## post release
###
log_progress_start "Preparing for the next development iteration"
for language in "${SUPPORTED_LANGUAGES[@]}"; do
  run post_release "$language"
  log_progress_increment
done
log_progress_finish

if [[ $(git status --porcelain) ]]; then
  git commit --gpg-sign --quiet --all --message="$(format_commit_message "Prepare for the next development iteration")"
  log "Post-release changes committed to to git"
fi

###
# push to github
##
local_branch=$(git rev-parse --abbrev-ref HEAD)
release_commit=$(git rev-list --max-count=1 "$NEW_VERSION_TAG")
release_branch="release/$NEW_VERSION_TAG"
if [[ -z $NO_GIT_PUSH ]]; then
  # shellcheck disable=SC2046
  git push --quiet --atomic origin "refs/heads/$local_branch" $(decorate "refs/tags/" "" "${TAGS[@]}") "$release_commit:refs/heads/$release_branch"
  log "Tag(s) ${TAGS[*]} pushed to origin"
  log "All commit(s) pushed to origin/$local_branch"
  log "Release commit (tagged with $NEW_VERSION_TAG) pushed to origin/$release_branch"
  if [[ -n $QUIET ]]; then
    echo "$release_branch"
  fi
else
  log "You now need to eyeball these commits, then push manually:"
  log
  log "# push local commits and tags to $local_branch"
  log "git push origin refs/heads/$local_branch $(decorate "refs/tags/" "" "${TAGS[@]}")"
  log
  log "# push to release branch"
  log "git push origin $release_commit:refs/heads/$release_branch"
  log
  log
  log "If things do not look quite right you can roll back the release:"
  log
  log "# reset to the commit before release started"
  log "git reset --hard $commit_before_release"
  log
  log "# delete the git tag that was created"
  log "git tag -d ${TAGS[*]}"
fi
