#!/bin/bash
set -e

# quiet output from pushd / popd
pushd () { 
  command pushd "$@" > /dev/null
}
popd () { 
  command popd "$@" > /dev/null
}

function release_javascript() {
  if [[ -d javascript ]]; then
    pushd javascript
    npm version $NEW_VERSION > /dev/null
    popd
  fi
}
function post_release_javascript() {
  # noop
  :
}

function release_java() {
  if [[ -d java ]]; then
    pushd java
    mvn --quiet versions:set -DnewVersion="$NEW_VERSION" 2> /dev/null
    mvn --quiet versions:set-scm-tag -DnewTag="v$NEW_VERSION" 2> /dev/null
    popd
  fi
}
function post_release_java() {
  if [[ -d java ]]; then
    pushd java
    NEW_VERSION_TEMPLATE="\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT"
    mvn --quiet \
      build-helper:parse-version \
      versions:set -DnewVersion="$NEW_VERSION_TEMPLATE" \
      versions:set-scm-tag -DnewTag="HEAD" \
      2> /dev/null
    popd
  fi
}

function release_ruby() {
  if [[ -d ruby ]]; then
    pushd ruby
    echo "$NEW_VERSION" >VERSION
    popd
  fi
}

function post_release_ruby() {
  # noop
  :
}

function validate_args() {
  if [[ ! "$NEW_VERSION" =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]; then
    echo "Invalid MAJOR.MINOR.PATCH argument: $NEW_VERSION"
    showUsage
    exit 1
  fi

  if [ -n "$(git tag --list "v$NEW_VERSION")" ]; then
    echo "Version $NEW_VERSION has already been released."
    exit 1
  fi
}

function validate_environment() {

   required_tools=("git" "changelog")
   [[ -d javascript ]] && required_tools+=("npm")
   [[ -d java ]] && required_tools+=("mvn")
   for tool in ${required_tools[@]}
   do
     if ! which -s $tool; then
       echo "$tool is not installed!"
       missing_tool="true"
     fi
   done
   if [ "$missing_tool" ]; then
     echo
     echo "Please install the missing required tool(s)."
     exit 1
   fi

  if [[ (-z $NO_GIT_TAG_CHECK) && (-z "$(git tag --list "v$(changelog latest)")") ]]; then
    echo "No git tag found for v$(changelog latest) (found in CHANGELOG.md)!"
    echo
    echo "Do you need to run this?"
    echo "    git fetch --tags"
    exit 1
  fi

  if ! git diff-index --quiet HEAD; then
    echo "Git has uncommitted changes."
    exit 1
  fi
}

# TODO:
# Version3:
# Integrity check (are all the tools installed?)
# Present the user with the current version?
# Show unreleased
# Reduce the output from git

# Version4:
# Bootstrap from single git repo.
# Add tests

# Version5:
# Version bumping
function showUsage() {
  echo "Usage: $0 [OPTIONS] MAJOR.MINOR.PATCH"
  echo "OPTIONS:"
  echo "  --help                 shows this help"
  echo "  --no-git-push          do not push to git"
  echo "  --no-git-commit        do not commit git"
  echo "  --no-git-tag-check     do not check local git tags are up to date with CHANGELOG.md"
  echo "  --only-release         do not update versions after release"
}

while [[ $# -gt 0 ]]; do
  case $1 in
  --no-git-push)
    NO_GIT_PUSH="true"
    shift # past argument
    ;;
  --no-git-commit)
    NO_GIT_COMMIT="true"
    NO_GIT_PUSH="true"
    shift # past argument
    ;;
  --no-git-tag-check)
    NO_GIT_TAG_CHECK="true"
    shift # past argument
    ;;
  --only-release)
    ONLY_RELEASE="true"
    shift # past argument
    ;;
  -h | --help)
    echo "Makes a release to GitHub"
    showUsage
    exit 0
    ;;
  -* | --*)
    echo "Unknown option $1"
    showUsage
    exit 1
    ;;
  *)
    POSITIONAL_ARGS+=("$1") # save positional arg
    shift                   # past argument
    ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

validate_environment

if [[ $# -ne 1 ]]; then
  echo "Missing MAJOR.MINOR.PATCH argument"
  showUsage
  exit 1
fi
NEW_VERSION=$1

validate_args

###
## release
###
release_javascript
release_java
release_ruby

changelog release "$NEW_VERSION" --tag-format "v%s" -o CHANGELOG.md

if [[ -z $NO_GIT_COMMIT ]]; then
  git commit --quiet --all --message="Prepare release v$NEW_VERSION"
  git tag "v$NEW_TAG"
fi

###
## post release
###
if [[ -n $ONLY_RELEASE ]]; then
  exit 0
fi

post_release_javascript
post_release_java
post_release_ruby

if [[ -z $NO_GIT_COMMIT ]]; then
  git commit --quiet --all --message="Prepare for the next development iteration"
fi

###
# push to github
##
if [[ -z $NO_GIT_PUSH ]]; then
  git push --quiet origin
  git push --quiet origin "$(git rev-list --max-count=1 "v$NEW_VERSION"):refs/heads/release/v$NEW_VERSION"
fi
